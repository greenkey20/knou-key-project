plugins {
    id 'java'
    id 'org.springframework.boot' version '3.1.1'
    id 'io.spring.dependency-management' version '1.1.0'
//    id "com.ewerk.gradle.plugins.querydsl" version "1.0.10" // Querydsl 추가
    id 'war'
}
apply plugin: 'war'

bootWar.enabled = false
war.enabled = true
// 2023.8.4(금) 20h50 개발 시에는 내장 톰캣 사용하고자 주석 처리함

group = 'org.knou'
version = '0.0.1-SNAPSHOT'

java {
    sourceCompatibility = '17'
}

repositories {
    mavenCentral()
}

ext {
    set('springCloudVersion', "2022.0.3")
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    compileOnly 'org.projectlombok:lombok'
    runtimeOnly 'com.h2database:h2'
    runtimeOnly 'com.mysql:mysql-connector-j'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'

    // 2023.7.22(토) 15h30 JSP 세팅 추가
//    implementation 'javax.servlet:jstl'
//    implementation group: 'org.glassfish.web', name: 'jakarta.servlet.jsp.jstl', version: '2.0.0'
    implementation 'jakarta.servlet:jakarta.servlet-api' //스프링부트 3.0 이상
    implementation 'jakarta.servlet.jsp.jstl:jakarta.servlet.jsp.jstl-api' //스프링부트 3.0 이상
    implementation 'org.glassfish.web:jakarta.servlet.jsp.jstl' //스프링부트 3.0 이상

    implementation "org.apache.tomcat.embed:tomcat-embed-jasper"

//    providedRuntime 'org.springframework.boot:spring-boot-starter-tomcat'

    // 2023.7.23(일) 22h35 추가 GSON
    implementation 'com.google.code.gson:gson'

    // 2023.7.28(금) 1h25 MapStruct = https://mapstruct.org/documentation/installation/
    implementation 'org.mapstruct:mapstruct:1.5.5.Final'
    annotationProcessor 'org.mapstruct:mapstruct-processor:1.5.5.Final'

    // 2023.8.1(화) 3H20 ChatGPT 관련 - api-key 유효기간은 24시간, 로그인한 계정으로 USD5 지급되며, api-key 발급 시마다 -USD0.05
    implementation 'io.github.flashvayne:chatgpt-spring-boot-starter:1.0.4'
//    compile group: 'org.apache.httpcomponents', name: 'httpclient', version: '4.5'
    // https://mvnrepository.com/artifact/org.apache.httpcomponents/httpclient
//    implementation group: 'org.apache.httpcomponents', name: 'httpclient', version: '4.5'

    // 2023.8.4(금) 0h25 jasypt: 특정 값을 암호화해주는 라이브러리
    implementation 'com.github.ulisesbocchio:jasypt-spring-boot-starter:3.0.4'

    // 2023.8.4(금) 20h55 Querydsl 추가
    implementation "com.querydsl:querydsl-jpa:5.0.0:jakarta" // Querydsl 라이브러리
    annotationProcessor "com.querydsl:querydsl-apt:5.0.0:jakarta" // Querydsl 관련 코드 생성 기능 제공
    annotationProcessor "jakarta.annotation:jakarta.annotation-api"
    annotationProcessor "jakarta.persistence:jakarta.persistence-api"

    // 2023.8.11(금) 19h5 S3 연계
    implementation platform("io.awspring.cloud:spring-cloud-aws-dependencies:3.0.1")
//    implementation group: 'io.awspring.cloud', name: 'spring-cloud-aws-starter', version: '3.0.0-M1'
//    implementation 'org.springframework.cloud:spring-cloud-starter-aws'

    // 2023.8.16(수) 3h session 저장소 = Spring Security 챕터를 진행한 경우에만(https://jojoldu.tistory.com/539)
//    implementation('org.springframework.session:spring-session-jdbc')

    // 2023.10.1(일) 22h5
    implementation "org.springframework.boot:spring-boot-starter-security"
}

tasks.named('test') {
    useJUnitPlatform()
}

// Querydsl 추가 시작
def querydslSrcDir = 'src/main/generated' // Querydsl에서 사용할 경로

clean {
    delete file(querydslSrcDir)
}

tasks.withType(JavaCompile) {
    options.generatedSourceOutputDirectory = file(querydslSrcDir)
}

/* SpringBoot3에서 여러 문제점들이 생길 수 있다고 함 (https://rachel0115.tistory.com/entry/QueryDsl-Spring-boot-30-%EC%9D%B4%EC%83%81-gradle-%EC%84%A4%EC%A0%95)
querydsl {
    jpa = true // JPA 사용 여부
    querydslSourcesDir = generated // 사용할 경로
}

// build 시 사용할 sourceSet 추가 설정
sourceSets {
    main.java.srcDir generated
}

// Querydsl 컴파일 시 사용할 옵션 설정
// complieQuerydsl Task에 clean 동작 추가
tasks.compileQuerydsl.dependsOn(clean);

compileQuerydsl {
    options.annotationProcessorPath = configurations.querydsl
}
 */
// Querydsl 추가 끝

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
//    querydsl.extendsFrom compileClasspath // Querydsl이 compileClassPath를 상속하도록 설정
}